@startuml

package OpenZepplin #DDDDDD {
    class Ownable << (T,red) >>
    class Destructible << (T,red) >>
    class StandardToken
}

package lifecycle {
    class Initializable << (T,red) >>
    class OnlyOnce << (T,red) >>
}

package pandora {

    package managers {
        class WorkerNodeManager
        class CognitiveJobManager
        abstract IWorkerNodeManager
        abstract ICognitiveJobManager

        WorkerNodeManager <|-- CognitiveJobManager
        IWorkerNodeManager <|-left- WorkerNodeManager
        ICognitiveJobManager <|-left- CognitiveJobManager
    }

    package tokens {
        class PAN
    }

    package hooks #orange {
        class PandoraHooks
    }

    package factories {
        class CognitiveJobFactory
        class WorkerNodeFactory
    }

    package lottery {
        abstract ILotteryEngine
        class RoundRobinLottery

        ILotteryEngine <|-- RoundRobinLottery
    }

    abstract IPandora
    class Pandora

    PAN <|-- IPandora
    ICognitiveJobManager <|-- IPandora
    IWorkerNodeManager <|-- IPandora

    IPandora <|-- Pandora
    Pandora <|-- PandoraHooks

    Pandora "1" <--> "1" CognitiveJobFactory
    Pandora "1" <--> "1" WorkerNodeFactory
    Pandora "1" <--> "1" ILotteryEngine
}

' Pandora external dependencies

Ownable <|-- IPandora
StandardToken <|-- PAN

Initializable <|-- CognitiveJobManager
Initializable <|-- WorkerNodeManager

OnlyOnce <|-- Pandora
CognitiveJobManager <|-- Pandora

package nodes {
    abstract IWorkerNode
    class WorkerNode
    class WorkerNodeStates << (K,orchid) >>

    WorkerNodeStates <|-left- IWorkerNode
    IWorkerNode <|-- WorkerNode
}

Ownable <|-- IWorkerNode


package jobs {
    abstract IComputingJob
    class CognitiveJob
    class JobStates << (K,orchid) >>

    JobStates <|-right- IComputingJob
    IComputingJob <|-- CognitiveJob
}

Destructible <|-- IComputingJob

IWorkerNode "∞" <--> "0..1" IComputingJob

package libraries {
    class StateMachineLib << (L,orange) >>
    abstract IStateMachine
    class StateMachine

    IStateMachine <|-- StateMachine
    StateMachineLib *-- StateMachine
}

IStateMachine <|-- IWorkerNode
StateMachine <|-- WorkerNode
IStateMachine <|-- IComputingJob
StateMachine <|-- CognitiveJob

IWorkerNodeManager "1" <--> "0..∞" IWorkerNode
ICognitiveJobManager "1" <--> "0..∞" IComputingJob

WorkerNodeFactory --o WorkerNode
CognitiveJobFactory --o CognitiveJob

package entitites {
    abstract IDataEntity
    abstract IDataEntity
    abstract IDataset
    abstract IKernel
    class DataEntity
    class Dataset
    class Kernel

    IDataEntity <|-left- DataEntity

    IDataset <|-down- Dataset
    IKernel <|-down- Kernel

    DataEntity <|-- Dataset
    DataEntity <|-- Kernel

    IDataEntity <|-- IDataset
    IDataEntity <|-- IKernel
}

Ownable <|-- IDataEntity

IComputingJob -up-> "1" IDataset
IComputingJob -up-> "1" IKernel

@enduml