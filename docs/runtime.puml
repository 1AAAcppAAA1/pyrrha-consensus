@startuml

abstract pandoraOwner

class Pandora< Ownable > {
  tokens
  reputation
  workerNodes
  activeJobs
  --
  createWorkerNode()
  destroyWorkerNode()
  createCognitiveJob()
  finishCognitiveJob()
  --
  *WorkerNodeCreated
  *WorkerNodeDestroyed
  *CognitiveJobCreated
}

class CognitiveJobFactory< Ownable >
class WorkerNodeFactory< Ownable >

Pandora -down-+ pandoraOwner
Pandora +-up-* "1" CognitiveJobFactory
Pandora +-up-* "1" WorkerNodeFactory

class WorkerNode< Ownable >
class CognitiveJob< Destructible >

Pandora +-left-* "∞" WorkerNode: IWorkerNode >
Pandora +-right-* "∞" CognitiveJob: IComputingJob >

CognitiveJobFactory -up-|> CognitiveJob
WorkerNodeFactory -up-|> WorkerNode

WorkerNode "∞" *-right-* "0..1" CognitiveJob

abstract workerOwner
WorkerNode -down-+ workerOwner

class StateMachineLib << (L,orange >>

WorkerNode -up-o StateMachineLib
CognitiveJob -up-o StateMachineLib

class Kernel< Ownable >
class Dataset< Ownable >

CognitiveJob -down-* Kernel: IKernel
CognitiveJob -down-* Dataset: IDataset

abstract kernelOwner
abstract datasetOwner

Kernel -down-+ kernelOwner
Dataset -down-+ datasetOwner

kernelOwner -right[hidden]- pandoraOwner
kernelOwner -right[hidden]- workerOwner

package Legend #DDDDDD {
    class Lib << (L,orange) >>
    A -left-+ B : ownership
    C -left-* D : referencing
    E -right-|> F : creation
    G -left-o Lib : using lib
}

StateMachineLib -down[hidden]-> F

class PandoraProxy << (S,white) Singleton >> {
    activeVersion : address
}

PandoraProxy --* Pandora
PandoraProxy -down-+ pandoraOwner

ref ()-- PandoraProxy

@enduml